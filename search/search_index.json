{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DevOps and Security Training Plan","text":"<p>Welcome to the DevOps &amp; Security training session!</p> <p>This guide provides a complete, step-by-step walkthrough of the hands-on labs we will be covering. Please follow the sections in order to ensure your environment is set up correctly for subsequent steps.</p> <p>Trainer: Basil Ndonga (DevOps Engineer)</p> <p>Let's get started!</p>"},{"location":"1-prepare-gcp-environment/","title":"1. Prepare the Google Cloud Environment","text":"<p>In this first section, we will log in to the Google Cloud console and set up the Cloud Shell, which will be our primary command-line environment for this training.</p>"},{"location":"1-prepare-gcp-environment/#sign-in-to-google-cloud-console","title":"Sign in to Google Cloud Console","text":"<ol> <li> <p>Using the credentials provided to you, log in to the Google Cloud console at the following URL: console.cloud.google.com.</p> <p></p> </li> <li> <p>After successfully logging in, you should land on the Welcome page of the management console.</p> <p></p> </li> </ol>"},{"location":"1-prepare-gcp-environment/#activate-cloud-shell","title":"Activate Cloud Shell","text":"<p>The Cloud Shell provides a command-line environment directly in your browser, with the <code>gcloud</code> SDK and other utilities pre-installed.</p> <ol> <li> <p>Open the Cloud Shell by clicking on the Activate Cloud Shell icon in the top-right corner of the console, as highlighted below.</p> <p></p> </li> <li> <p>A new frame will open at the bottom of your window. Click Continue to proceed.</p> <p></p> </li> <li> <p>You will be prompted to grant Cloud Shell permission to use your account credentials to make API calls to Google Cloud. Click Authorize.</p> <p></p> </li> <li> <p>On some occasions, you may be asked to re-enter your password to continue.</p> <p></p> </li> </ol>"},{"location":"1-prepare-gcp-environment/#open-cloud-shell-in-a-new-tab","title":"Open Cloud Shell in a New Tab","text":"<p>For a better experience, we will open the Cloud Shell in its own dedicated browser tab.</p> <ol> <li> <p>When the provisioning is complete, your Cloud Shell terminal is ready.</p> <p></p> </li> <li> <p>Click the Open in new window button to launch the Cloud Shell in a new tab.</p> <p></p> </li> <li> <p>The Cloud Shell will now be open in a new, full-screen browser tab. You may be asked to Authorize again.</p> <p></p> </li> </ol> <p>You are now ready for the next section! Your Google Cloud environment is prepared, and your Cloud Shell is active. In the next section, we will set up the Cloud SQL database.</p>"},{"location":"2-setup-cloud-sql/","title":"2. Setup Database in Cloud SQL","text":"<p>Next, we need to set up the database to ensure all the necessary data is populated for our application. We will do this by importing a pre-configured SQL file into our Cloud SQL instance.</p>"},{"location":"2-setup-cloud-sql/#navigate-to-cloud-sql","title":"Navigate to Cloud SQL","text":"<ol> <li> <p>Navigate to the Cloud SQL instances page by searching for \"Cloud SQL\" in the top search bar or by using this direct link:     https://console.cloud.google.com/sql/instances</p> </li> <li> <p>You should see that a Cloud SQL instance has already been provisioned for you.</p> <p></p> </li> </ol>"},{"location":"2-setup-cloud-sql/#import-the-database","title":"Import the Database","text":"<ol> <li> <p>Click on the Instance ID to open the instance details page.</p> </li> <li> <p>At the top of the page, click the IMPORT button.</p> <p></p> </li> <li> <p>On the \"Import data\" screen, under the Select source file section, click BROWSE.</p> <p></p> </li> <li> <p>A popup window will appear showing your Cloud Storage buckets. Double-click on the bucket name that ends with <code>-cloud-mastery</code>.</p> <p></p> </li> <li> <p>Select the <code>cloud_mastery.sql</code> file and click the SELECT button at the bottom.</p> <p></p> </li> <li> <p>Finally, under the Destination section, expand the Database dropdown and select <code>cloud_mastery</code>.</p> <p></p> </li> <li> <p>Click the IMPORT button to start the process. The import will begin, and you will be returned to the instance details page.</p> </li> </ol> <p>Database setup is complete! You can now proceed to the next step, where we will prepare our GitHub environment.</p>"},{"location":"3-prepare-github-backend/","title":"3. Prepare GitHub Environment &amp; Backend Repo","text":"<p>For this lab, we will work with two application repositories: <code>cloud-mastery-backend</code> and <code>cloud-mastery-frontend</code>. First, we need to set up your GitHub account and configure it to work with your Google Cloud Shell environment.</p> <p>Do you have a GitHub Account?     If you already have a GitHub account, you can skip directly to the Fork the Backend Repository section.</p>"},{"location":"3-prepare-github-backend/#create-a-new-github-account-optional","title":"Create a New GitHub Account (Optional)","text":"<ol> <li> <p>Navigate to the GitHub signup page: github.com/signup.</p> </li> <li> <p>Fill in your details (email, password, username) to create your account.</p> <p></p> </li> <li> <p>Complete the \"Verify your account\" puzzle to prove you're human.</p> <p></p> </li> <li> <p>GitHub will send a verification code to your email address. Enter this code to confirm your email.</p> <p></p> </li> <li> <p>Once verified, proceed to sign in. Your new GitHub account is now ready!</p> <p></p> </li> </ol>"},{"location":"3-prepare-github-backend/#fork-the-backend-repository","title":"Fork the Backend Repository","text":"<p>You need your own copy of the application repository to make changes. This is done by \"forking\" it.</p> <ol> <li> <p>Access the Cloud Mastery backend repository here:     https://github.com/Pawa-IT-Solutions/cloud-mastery-backend</p> </li> <li> <p>Click the Fork button in the top-right corner.</p> <p></p> </li> <li> <p>On the \"Create a new fork\" page, you can leave the details as they are and click Create fork.</p> <p></p> </li> <li> <p>You will be redirected to your own forked copy of the repository. It is now ready!</p> <p></p> </li> </ol>"},{"location":"3-prepare-github-backend/#configure-cloud-shell-ssh-key","title":"Configure Cloud Shell SSH Key","text":"<p>To securely clone the repository to your Cloud Shell, you need to add your Cloud Shell's SSH key to your GitHub account.</p> <ol> <li> <p>Navigate back to your Google Cloud Shell tab.</p> </li> <li> <p>Run the <code>ssh-keygen</code> command to generate a new SSH key. Press <code>Enter</code> three times to accept the default file location and create a key without a passphrase.</p> <p><code>ssh-keygen</code> </p> </li> <li> <p>Verify that the public key file (<code>id_ed25519.pub</code>) was created.</p> <p><code>ls -l .ssh/</code> </p> </li> <li> <p>Display the public key and copy its entire content to your clipboard.</p> <p><code>cat .ssh/id_ed25519.pub</code> </p> </li> <li> <p>Head back to your GitHub tab. Click on your profile icon in the top-right corner and select Settings.</p> <p> </p> </li> <li> <p>In the left navigation menu, click on SSH and GPG keys.</p> <p></p> </li> <li> <p>Click New SSH key. Give it a descriptive Title (e.g., \"Google Cloud Shell\") and paste the copied key into the Key field. Click Add SSH key.</p> <p></p> </li> </ol>"},{"location":"3-prepare-github-backend/#clone-the-repository-to-cloud-shell","title":"Clone the Repository to Cloud Shell","text":"<p>Now you can clone your forked repository.</p> <ol> <li> <p>In GitHub, navigate to your forked <code>cloud-mastery-backend</code> repository. Click the green &lt;&gt; Code button, select the SSH tab, and copy the SSH URL.</p> <p></p> </li> <li> <p>Go back to your Cloud Shell terminal and run the <code>git clone</code> command, pasting the URL you just copied.     Replace the URL with your own forked repository SSH URL</p> <p><code>git clone git@github.com:austinkaruru1/cloud-mastery-backend.git</code></p> </li> <li> <p>When prompted <code>Are you sure you want to continue connecting (yes/no/[fingerprint])?</code>, type <code>yes</code> and press <code>Enter</code>.</p> <p></p> </li> <li> <p>Navigate into the newly created directory and list its contents.</p> <p><code>cd cloud-mastery-backend &amp;&amp; ls -l</code> </p> </li> </ol> <p>Great job! Your GitHub account is configured, and you have successfully cloned the backend application code into your Cloud Shell. Next, we will set up the continuous integration pipeline using Cloud Build.</p>"},{"location":"4-setup-cloud-build-backend/","title":"4. Setup Cloud Build for the Backend","text":"<p>Now that we have our source code in a GitHub repository, we'll set up a continuous integration (CI) pipeline using Google Cloud Build. This pipeline will automatically build and deploy our backend application to Cloud Run whenever we push changes to the repository.</p>"},{"location":"4-setup-cloud-build-backend/#create-a-cloud-build-trigger","title":"Create a Cloud Build Trigger","text":"<ol> <li> <p>Navigate to the Google Cloud console. In the top search bar, type <code>Cloud Build</code> and select Triggers from the results.</p> <p></p> </li> <li> <p>On the Triggers page, click Create trigger.</p> <p></p> </li> </ol>"},{"location":"4-setup-cloud-build-backend/#configure-the-trigger","title":"Configure the Trigger","text":"<ol> <li>Name: Give your trigger a descriptive name (e.g., <code>cloud-mastery-backend-deploy</code>).</li> <li>Region: Select <code>us-central1 (Iowa)</code>.</li> <li>Event: Leave as <code>Push to a branch</code>.</li> <li>Source:<ul> <li>Repository: Click Connect new repository. </li> <li>Select GitHub (Cloud Build GitHub App) and click Continue.</li> <li>Authorize Google Cloud Build to access your GitHub account. </li> <li>On the GitHub page that opens, select All repositories and click Install. This allows Cloud Build to see your repos. </li> <li>Back in the Cloud Build UI, select your forked <code>austinkaruru1/cloud-mastery-backend</code> repository.</li> <li>Check the consent box and click Connect. </li> </ul> </li> <li>Branch: Enter <code>^master$</code> to trigger builds from the master branch.</li> <li>Configuration:<ul> <li>Type: Select <code>Cloud Build configuration file (yaml or json)</code>.</li> <li>Location: Leave as <code>Repository</code>. The default path <code>/cloudbuild.yaml</code> is correct.</li> </ul> </li> <li>Advanced: Substitution Variables:<ul> <li>We need to pass the database connection string as a secret to our build.</li> <li>Click Add variable.</li> <li>Variable: <code>_MYSQL_PRISMA_URL</code></li> <li>Value: This requires the public IP of your Cloud SQL instance. Open a new tab and navigate to the Cloud SQL instances page. Copy the Public IP address of your instance.     </li> <li>Construct the connection string using the format below, replacing <code>&lt;INSTANCE_IP_ADDRESS&gt;</code> with the IP you just copied.     <code>mysql://student:project-id@&lt;INSTANCE_IP_ADDRESS&gt;:3306/cloud_mastery?sslmode=require</code></li> <li>Paste the complete string into the Value field for the <code>_MYSQL_PRISMA_URL</code> variable.     </li> </ul> </li> <li> <p>Service Account: In the \"Advanced\" section, find the Service Account dropdown and select the service account that starts with <code>terraform-</code>. This account has the necessary permissions.</p> <p></p> </li> <li> <p>Click Create to finalize the trigger.</p> </li> </ol>"},{"location":"4-setup-cloud-build-backend/#run-the-trigger-and-verify-deployment","title":"Run the Trigger and Verify Deployment","text":"<ol> <li> <p>You will be taken back to the Triggers list. Find your new trigger and click Run.</p> <p></p> </li> <li> <p>A popup will appear. Confirm the branch is <code>master</code> and click Run trigger.</p> <p></p> </li> <li> <p>You will be redirected to the History page. Click on the running build to view its progress.</p> <p> </p> </li> <li> <p>The build will take approximately 7 minutes to complete. Once finished, you should see a \"Successful\" status.</p> <p></p> </li> <li> <p>Navigate to Cloud Run in the console or use this link: console.cloud.google.com/run. You should now see the <code>cloud-mastery-backend</code> service deployed and running.</p> <p></p> </li> </ol> <p>Backend deployment successful! You have now fully automated the build and deployment process for the backend application. In the next section, we'll repeat this process for the frontend.</p>"},{"location":"5-setup-frontend-repo/","title":"5. Setup the Frontend Repository","text":"<p>Now we will repeat the process for the <code>cloud-mastery-frontend</code> application. We will fork the repository to our GitHub account and then clone it into our Cloud Shell environment.</p>"},{"location":"5-setup-frontend-repo/#fork-the-frontend-repository","title":"Fork the Frontend Repository","text":"<ol> <li> <p>Access the Cloud Mastery frontend repository here:     https://github.com/Pawa-IT-Solutions/cloud-mastery-frontend</p> </li> <li> <p>Just like before, click the Fork button in the top-right corner.</p> <p></p> </li> <li> <p>On the \"Create a new fork\" page, you can accept the default settings and click Create fork.</p> <p></p> </li> <li> <p>You will be redirected to your personal forked copy of the <code>cloud-mastery-frontend</code> repository.</p> <p></p> </li> </ol>"},{"location":"5-setup-frontend-repo/#clone-the-frontend-repository-to-cloud-shell","title":"Clone the Frontend Repository to Cloud Shell","text":"<p>We will clone the frontend into a separate directory within our Cloud Shell home directory.</p> <ol> <li> <p>In GitHub, navigate to your forked <code>cloud-mastery-frontend</code> repository. Click the green &lt;&gt; Code button, select the SSH tab, and copy the SSH URL.</p> <p></p> </li> <li> <p>Navigate back to your Google Cloud Shell tab. Your current directory should be <code>~/cloud-mastery-backend</code>. First, go back to your home directory.</p> <p><code>cd ~</code></p> <p>Working with Multiple Terminals     Your document shows opening a new Cloud Shell terminal tab by clicking the <code>+</code> icon. This is a great way to manage separate tasks. For this guide, we will perform the clone from the home directory in the same terminal.</p> <p> </p> </li> <li> <p>Run the <code>git clone</code> command, pasting the frontend repository's SSH URL you just copied.     # Replace the URL with your own forked repository SSH URL</p> <p><code>git clone git@github.com:austinkaruru1/cloud-mastery-frontend.git</code></p> <p></p> </li> <li> <p>List the contents of your home directory. You should now see folders for both the backend and frontend repositories.</p> <p><code>ls -l</code> </p> </li> <li> <p>Navigate into the new frontend directory to confirm the files are there.     <code>cd cloud-mastery-frontend &amp;&amp; ls -l</code></p> <p></p> </li> </ol> <p>Frontend repository is ready! You now have the source code for both the backend and frontend applications in your Cloud Shell. Next, we will create the Cloud Build trigger to automate the deployment of the frontend.</p>"},{"location":"6-setup-cloud-build-frontend/","title":"6. Setup Cloud Build for the Frontend","text":"<p>We will now create the final CI/CD pipeline for our frontend application. This process is very similar to the backend setup but requires different environment variables for the application to connect to the backend API.</p>"},{"location":"6-setup-cloud-build-frontend/#create-the-frontend-trigger","title":"Create the Frontend Trigger","text":"<ol> <li>Navigate back to Cloud Build &gt; Triggers in the Google Cloud console.</li> <li>Click Create trigger.</li> </ol>"},{"location":"6-setup-cloud-build-frontend/#configure-the-trigger","title":"Configure the Trigger","text":"<ol> <li>Name: <code>cloud-mastery-frontend-deploy</code></li> <li>Region: <code>us-central1 (Iowa)</code></li> <li>Source:<ul> <li>Repository: Select your forked <code>austinkaruru1/cloud-mastery-frontend</code> repository from the dropdown. It should already be available since we connected your GitHub account.      </li> </ul> </li> <li>Branch: Enter <code>^master$</code></li> <li>Configuration:<ul> <li>Type: <code>Cloud Build configuration file (yaml or json)</code></li> <li>Location: <code>/cloudbuild.yaml</code> (default)</li> </ul> </li> <li> <p>Advanced: Substitution Variables:</p> <ul> <li>This time, we need to add two variables. Click Add variable twice.</li> </ul> <p>!!! info \"Important: Backend URL Needed\"     One of the variables requires the URL of the <code>cloud-mastery-backend</code> service you deployed in a previous step.</p> <ul> <li>Variable 1:<ul> <li>Variable: <code>_NEXT_PUBLIC_APP_NAME</code></li> <li>Value: <code>CLOUD MASTERY TRAINING</code></li> </ul> </li> <li>Variable 2:<ul> <li>Variable: <code>_NEXT_PUBLIC_API_URL</code></li> <li>Value: To get this value, open a new tab and go to the Cloud Run console. Click on your <code>cloud-mastery-backend</code> service and copy its URL.     </li> <li>Paste the URL into the value field and append <code>/api/v1</code> to the end. It should look like this:     <code>https://cloud-mastery-backend-xxxxxxxxxx.us-central1.run.app/api/v1</code> </li> </ul> </li> </ul> </li> <li> <p>Service Account: Select the <code>terraform-</code> service account, just as you did for the backend.</p> </li> <li> <p>Click Create. Your Cloud Build Triggers list should now show both the backend and frontend triggers.</p> <p></p> </li> </ol> <p>Frontend pipeline is configured! In the final step, we will run this trigger and access our fully deployed application.</p>"},{"location":"7-accessing-the-application/","title":"7. Run the Build &amp; Access the Application","text":"<p>This is the final step. We will manually run our newly created frontend trigger, which will build the frontend application and deploy it to Cloud Run. Once complete, we can access the public URL to see our live dashboard.</p>"},{"location":"7-accessing-the-application/#run-the-frontend-trigger","title":"Run the Frontend Trigger","text":"<ol> <li>From the Cloud Build Triggers list, find your <code>cloud-mastery-frontend-deploy</code> trigger and click Run.</li> <li> <p>In the popup, confirm the branch name (<code>master</code>) and click Run trigger.</p> <p></p> </li> </ol>"},{"location":"7-accessing-the-application/#monitor-the-build-and-access-the-application","title":"Monitor the Build and Access the Application","text":"<ol> <li>You will be taken to the History page. Click on the running build to monitor its progress.</li> <li> <p>This build will take less time compared to the cloud mastery backend build.</p> <p></p> </li> <li> <p>Once the build completes successfully, you are ready to see the application!</p> <p></p> </li> <li> <p>Navigate to the Cloud Run page in the console.</p> </li> <li> <p>Click on the <code>cloud-mastery-frontend</code> service.</p> </li> <li> <p>At the top of the service details page, you will see the primary URL for the application. Click on it to open it in a new tab.</p> <p></p> </li> <li> <p>You should now see the fully deployed application dashboard!</p> <p></p> </li> </ol>"},{"location":"7-accessing-the-application/#congratulations","title":"Congratulations!","text":"<p>You have successfully built and deployed a full-stack, database-driven application on Google Cloud.</p> <p>Throughout this lab, you have:</p> <ul> <li>Prepared a Google Cloud environment and used the Cloud Shell.</li> <li>Populated a managed Cloud SQL database.</li> <li>Forked repositories and configured GitHub with SSH for secure access.</li> <li>Built two separate CI/CD pipelines with Cloud Build.</li> <li>Passed secrets to the build process using substitution variables.</li> <li>Deployed both backend and frontend services to Cloud Run.</li> </ul>"}]}